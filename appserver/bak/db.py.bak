#!/usr/bin/env python
# coding=utf-8
"""
 Copyright (C) 2010-2013, Ryan Fan <ryan.fan@oracle.com>

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Library General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
"""
from __future__ import absolute_import
import logging
import redis

from celery.signals import worker_process_init, worker_process_shutdown
from wxmp import celeryconfig

logger = logging.getLogger(__name__)

def get_redis_conn_info():
     # if doesnt' define result backend, which means we may not be able to persistent configuration
    if not getattr(celeryconfig, 'CELERY_RESULT_BACKEND'):
        return None

    try:
        # 'redis://127.0.0.1:6379/0'
        tmp_list = celeryconfig.CELERY_RESULT_BACKEND.split("//")[-1].split("/")
        hoststr = tmp_list[0]
        db = tmp_list[1]
        host = hoststr.split(":")[0]
        port = hoststr.split(":")[1]
    except Exception,e:
        print "{0}{1}{2}".format(host, port, db)
        raise e

    return (host, port, db)

(host, port, db) = get_redis_conn_info()
g_db = redis.Redis(host=host, port=port, db=db)

#@worker_process_init.connect
#def init_worker(**kwargs):
    #global g_db
    #print('Initializing database connection for worker.')
    #(host, port, db) = get_redis_conn_info()
    #if not host:
    #       raise Exception("Failed to find redis connection information")

    #g_db = redis.Redis(host=host, port=port, db=db)

#@worker_process_shutdown.connect
#def shutdown_worker(**kwargs):
#    print('Closing database connectionn for worker.')
#    #global db_conn
#    #if db_conn:
#    #    print('Closing database connectionn for worker.')
#    #    db_conn.close()
