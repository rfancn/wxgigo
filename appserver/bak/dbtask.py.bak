#!/usr/bin/env python
# coding=utf-8
"""
 Copyright (C) 2010-2013, Ryan Fan <ryan.fan@oracle.com>

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Library General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
"""
from __future__ import absolute_import
import logging
import redis

from celery import Task
from celery.app.task import TaskType
from wxmp import celeryconfig

logger = logging.getLogger(__name__)

class MetaTest(type):
    def __new__(cls, future_class_name, future_class_parents, future_class_attr):
        (host, port, db) = MetaTest.get_redis_conn_info()
        future_class_attr['db'] = redis.Redis(host=host, port=port, db=db)
        print future_class_attr['db']
        if not host:
            raise Exception("Failed to find redis connection information")

        return type.__new__(cls, future_class_name, future_class_parents, future_class_attr)

    @classmethod
    def get_redis_conn_info(cls):
         # if doesnt' define result backend, which means we may not be able to persistent configuration
        if not getattr(celeryconfig, 'CELERY_RESULT_BACKEND'):
            return None

        try:
            # 'redis://127.0.0.1:6379/0'
            tmp_list = celeryconfig.CELERY_RESULT_BACKEND.split("//")[-1].split("/")
            hoststr = tmp_list[0]
            db = tmp_list[1]
            host = hoststr.split(":")[0]
            port = hoststr.split(":")[1]
        except Exception,e:
            print "{0}{1}{2}".format(host, port, db)
            raise e

        return (host, port, db)

class MetaMixed(TaskType, MetaTest):
    pass

class TestMixed(object):
    __metaclass__ = MetaTest

class WXMPDBTask(TestMixed, Task):
    abstract = True
    __metaclass__ = MetaMixed