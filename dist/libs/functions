# -*-Shell-script-*-

##################################
# ANSI colorized action function #
##################################
BOOTUP=color
RES_COL=60
MOVE_TO_COL="echo -en \\033[${RES_COL}G"
SETCOLOR_SUCCESS="echo -en \\033[1;32m"
SETCOLOR_FAILURE="echo -en \\033[1;31m"
SETCOLOR_WARNING="echo -en \\033[1;33m"
SETCOLOR_NORMAL="echo -en \\033[0;39m"

echo_success() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n $"  OK  "
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 0
}

echo_failure() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo -n $"FAILED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

echo_passed() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
  echo -n $"PASSED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

echo_warning() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
  echo -n $"WARNING"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

# Log that something succeeded
success() {
  [ "$BOOTUP" != "verbose" -a -z "${LSB:-}" ] && echo_success
  return 0
}

# Log that something failed
failure() {
  local rc=$?
  [ "$BOOTUP" != "verbose" -a -z "${LSB:-}" ] && echo_failure
  [ -x /bin/plymouth ] && /bin/plymouth --details
  return $rc
}

# Log that something passed, but may have had errors. Useful for fsck
passed() {
  local rc=$?
  [ "$BOOTUP" != "verbose" -a -z "${LSB:-}" ] && echo_passed
  return $rc
}

# Log a warning
warning() {
  local rc=$?
  [ "$BOOTUP" != "verbose" -a -z "${LSB:-}" ] && echo_warning
  return $rc
}

# Run some action. Log its output.
fn_action() {
  local STRING rc

  STRING=$1
  echo -n "$STRING "
  shift
  "$@" && success $"$STRING" || failure $"$STRING"
  rc=$?
  echo
  return $rc
}

##################################
# Get distribution release info  #
##################################
fn_get_version_from_file()
{
	VERSION=`cat $1 | tr "\n" ' ' | sed s/.*VERSION.*=\ // `
}

fn_get_os_info()
{
    OSTYPE=`uname -s`
    OSREV=`uname -r`
    OSMACH=`uname -m`

    if [ "${OSTYPE}" = "SunOS" ] ; then
	    OSTYPE=Solaris
	    OSARCH=`uname -p`
	    OSSTR="${OSTYPE} ${OSREV}(${ARCH} `uname -v`)"
    elif [ "${OSTYPE}" = "AIX" ] ; then
	    OSSTR="${OSTYPE} `oslevel` (`oslevel -r`)"
    elif [ "${OSTYPE}" = "Linux" ] ; then
	    OSKERNEL=`uname -r`
	    if [ -f /etc/oracle-release ] ; then
		    OSDIST='OracleLinux'
		    PSUEDONAME=`cat /etc/oracle-release | sed s/.*\(// | sed s/\)//`
		    OSREV=`cat /etc/oracle-release | sed s/.*release\ // | sed s/\ .*//`
		elif [ -f /etc/centos-release ] ; then
		    OSDIST='CentOS'
		    PSUEDONAME=`cat /etc/centos-release | sed s/.*\(// | sed s/\)//`
		    OSREV=`cat /etc/centos-release | sed s/.*release\ // | sed s/\ .*//`
        elif [ -f /etc/redhat-release ] ; then
		    OSDIST='RedHat'
		    PSUEDONAME=`cat /etc/redhat-release | sed s/.*\(// | sed s/\)//`
		    OSREV=`cat /etc/redhat-release | sed s/.*release\ // | sed s/\ .*//`
	    elif [ -f /etc/SUSE-release ] ; then
		    OSDIST=`cat /etc/SUSE-release | tr "\n" ' '| sed s/VERSION.*//`
		    OSREV=`cat /etc/SUSE-release | tr "\n" ' ' | sed s/.*=\ //`
	    elif [ -f /etc/mandrake-release ] ; then
		    OSDIST='Mandrake'
		    PSUEDONAME=`cat /etc/mandrake-release | sed s/.*\(// | sed s/\)//`
		    OSREV=`cat /etc/mandrake-release | sed s/.*release\ // | sed s/\ .*//`
	    elif [ -f /etc/debian_version ] ; then
		    OSDIST="Debian `cat /etc/debian_version`"
		    OSREV=""
        fi
	    if [ -f /etc/UnitedLinux-release ] ; then
		    OSDIST="${OSDIST}[`cat /etc/UnitedLinux-release | tr "\n" ' ' | sed s/VERSION.*//`]"
	    fi


	    OSSTR="${OSTYPE} ${OSDIST} ${OSREV}(${PSUEDONAME} ${OSKERNEL} ${OSMACH})"
    fi
}


DIST_DIR=
fn_detect_dist_dir()
{
    # get environment related variables
    fn_get_os_info
    shopt -s nocasematch
    case $OSDIST in
        'redhat'|'centos'|'oraclelinux')
            DIST_DIR='redhat';;
        'debian')
            DIST_DIR="debian";;
        *)
            echo "Not supported operating system!"
            exit 1;;
    esac
}

SERVER_ROLE=
fn_get_server_role_via_cmd()
{
    SERVER_ROLE=$1
    if [ "x$SERVER_ROLE" = "x" ];then
        SERVER_ROLE="default"
    fi

    case $SERVER_ROLE in
        'default'|'wxserver'|'appserver'|'dbserver');;
        *)
           echo "Invalid server role!"
           exit 1;;
     esac
}

fn_get_server_role_via_file()
{
    FILE_SERVER_ROLE=$DIST_BASE_DIR/.server_role
    if [ ! -f $FILE_SERVER_ROLE ]; then
        echo "Failed to locate .server_role file!"
        exit 1
    fi

    SERVER_ROLE=$(cut -d' ' -f1 $FILE_SERVER_ROLE)
    case $SERVER_ROLE in
        'default'|'wxserver'|'appserver'|'dbserver');;
        *)
           echo "Invalid server role!"
           exit 1;;
     esac
}